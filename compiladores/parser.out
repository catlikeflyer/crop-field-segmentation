Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> assignment
Rule 1     assignment -> VARIABLE SETTO expression
Rule 2     assignment -> VARIABLE SETTO flow
Rule 3     flow -> VARIABLE CONNECT flow_functions
Rule 4     flow_functions -> flow_function_call CONNECT flow_functions
Rule 5     flow_functions -> flow_function_call
Rule 6     flow_function_call -> VARIABLE LPAREN params RPAREN
Rule 7     assignment -> expression
Rule 8     expression -> expression PLUS term
Rule 9     expression -> expression MINUS term
Rule 10    expression -> term
Rule 11    expression -> string
Rule 12    string -> STRING
Rule 13    term -> term TIMES exponent
Rule 14    term -> term DIVIDE exponent
Rule 15    term -> exponent
Rule 16    exponent -> factor EXP factor
Rule 17    exponent -> factor
Rule 18    exponent -> LPAREN expression RPAREN
Rule 19    factor -> NUMBER
Rule 20    factor -> VARIABLE
Rule 21    factor -> function_call
Rule 22    function_call -> VARIABLE LPAREN RPAREN
Rule 23    function_call -> VARIABLE LPAREN params RPAREN
Rule 24    params -> params COMMA expression
Rule 25    params -> expression

Terminals, with rules where they appear

COMMA                : 24
CONNECT              : 3 4
DIVIDE               : 14
EXP                  : 16
LPAREN               : 6 18 22 23
MINUS                : 9
NUMBER               : 19
PLUS                 : 8
RPAREN               : 6 18 22 23
SETTO                : 1 2
STRING               : 12
TIMES                : 13
VARIABLE             : 1 2 3 6 20 22 23
error                : 

Nonterminals, with rules where they appear

assignment           : 0
exponent             : 13 14 15
expression           : 1 7 8 9 18 24 25
factor               : 16 16 17
flow                 : 2
flow_function_call   : 4 5
flow_functions       : 3 4
function_call        : 21
params               : 6 23 24
string               : 11
term                 : 8 9 10 13 14

Parsing method: LALR

state 0

    (0) S' -> . assignment
    (1) assignment -> . VARIABLE SETTO expression
    (2) assignment -> . VARIABLE SETTO flow
    (7) assignment -> . expression
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) expression -> . string
    (13) term -> . term TIMES exponent
    (14) term -> . term DIVIDE exponent
    (15) term -> . exponent
    (12) string -> . STRING
    (16) exponent -> . factor EXP factor
    (17) exponent -> . factor
    (18) exponent -> . LPAREN expression RPAREN
    (19) factor -> . NUMBER
    (20) factor -> . VARIABLE
    (21) factor -> . function_call
    (22) function_call -> . VARIABLE LPAREN RPAREN
    (23) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 2
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10

    assignment                     shift and go to state 1
    expression                     shift and go to state 3
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 1

    (0) S' -> assignment .



state 2

    (1) assignment -> VARIABLE . SETTO expression
    (2) assignment -> VARIABLE . SETTO flow
    (20) factor -> VARIABLE .
    (22) function_call -> VARIABLE . LPAREN RPAREN
    (23) function_call -> VARIABLE . LPAREN params RPAREN

    SETTO           shift and go to state 12
    EXP             reduce using rule 20 (factor -> VARIABLE .)
    TIMES           reduce using rule 20 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 20 (factor -> VARIABLE .)
    PLUS            reduce using rule 20 (factor -> VARIABLE .)
    MINUS           reduce using rule 20 (factor -> VARIABLE .)
    $end            reduce using rule 20 (factor -> VARIABLE .)
    LPAREN          shift and go to state 13


state 3

    (7) assignment -> expression .
    (8) expression -> expression . PLUS term
    (9) expression -> expression . MINUS term

    $end            reduce using rule 7 (assignment -> expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 4

    (10) expression -> term .
    (13) term -> term . TIMES exponent
    (14) term -> term . DIVIDE exponent

    PLUS            reduce using rule 10 (expression -> term .)
    MINUS           reduce using rule 10 (expression -> term .)
    $end            reduce using rule 10 (expression -> term .)
    RPAREN          reduce using rule 10 (expression -> term .)
    COMMA           reduce using rule 10 (expression -> term .)
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 5

    (11) expression -> string .

    PLUS            reduce using rule 11 (expression -> string .)
    MINUS           reduce using rule 11 (expression -> string .)
    $end            reduce using rule 11 (expression -> string .)
    RPAREN          reduce using rule 11 (expression -> string .)
    COMMA           reduce using rule 11 (expression -> string .)


state 6

    (15) term -> exponent .

    TIMES           reduce using rule 15 (term -> exponent .)
    DIVIDE          reduce using rule 15 (term -> exponent .)
    PLUS            reduce using rule 15 (term -> exponent .)
    MINUS           reduce using rule 15 (term -> exponent .)
    $end            reduce using rule 15 (term -> exponent .)
    RPAREN          reduce using rule 15 (term -> exponent .)
    COMMA           reduce using rule 15 (term -> exponent .)


state 7

    (12) string -> STRING .

    PLUS            reduce using rule 12 (string -> STRING .)
    MINUS           reduce using rule 12 (string -> STRING .)
    $end            reduce using rule 12 (string -> STRING .)
    RPAREN          reduce using rule 12 (string -> STRING .)
    COMMA           reduce using rule 12 (string -> STRING .)


state 8

    (16) exponent -> factor . EXP factor
    (17) exponent -> factor .

    EXP             shift and go to state 18
    TIMES           reduce using rule 17 (exponent -> factor .)
    DIVIDE          reduce using rule 17 (exponent -> factor .)
    PLUS            reduce using rule 17 (exponent -> factor .)
    MINUS           reduce using rule 17 (exponent -> factor .)
    $end            reduce using rule 17 (exponent -> factor .)
    RPAREN          reduce using rule 17 (exponent -> factor .)
    COMMA           reduce using rule 17 (exponent -> factor .)


state 9

    (18) exponent -> LPAREN . expression RPAREN
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) expression -> . string
    (13) term -> . term TIMES exponent
    (14) term -> . term DIVIDE exponent
    (15) term -> . exponent
    (12) string -> . STRING
    (16) exponent -> . factor EXP factor
    (17) exponent -> . factor
    (18) exponent -> . LPAREN expression RPAREN
    (19) factor -> . NUMBER
    (20) factor -> . VARIABLE
    (21) factor -> . function_call
    (22) function_call -> . VARIABLE LPAREN RPAREN
    (23) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 20

    expression                     shift and go to state 19
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 10

    (19) factor -> NUMBER .

    EXP             reduce using rule 19 (factor -> NUMBER .)
    TIMES           reduce using rule 19 (factor -> NUMBER .)
    DIVIDE          reduce using rule 19 (factor -> NUMBER .)
    PLUS            reduce using rule 19 (factor -> NUMBER .)
    MINUS           reduce using rule 19 (factor -> NUMBER .)
    $end            reduce using rule 19 (factor -> NUMBER .)
    RPAREN          reduce using rule 19 (factor -> NUMBER .)
    COMMA           reduce using rule 19 (factor -> NUMBER .)


state 11

    (21) factor -> function_call .

    EXP             reduce using rule 21 (factor -> function_call .)
    TIMES           reduce using rule 21 (factor -> function_call .)
    DIVIDE          reduce using rule 21 (factor -> function_call .)
    PLUS            reduce using rule 21 (factor -> function_call .)
    MINUS           reduce using rule 21 (factor -> function_call .)
    $end            reduce using rule 21 (factor -> function_call .)
    RPAREN          reduce using rule 21 (factor -> function_call .)
    COMMA           reduce using rule 21 (factor -> function_call .)


state 12

    (1) assignment -> VARIABLE SETTO . expression
    (2) assignment -> VARIABLE SETTO . flow
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) expression -> . string
    (3) flow -> . VARIABLE CONNECT flow_functions
    (13) term -> . term TIMES exponent
    (14) term -> . term DIVIDE exponent
    (15) term -> . exponent
    (12) string -> . STRING
    (16) exponent -> . factor EXP factor
    (17) exponent -> . factor
    (18) exponent -> . LPAREN expression RPAREN
    (19) factor -> . NUMBER
    (20) factor -> . VARIABLE
    (21) factor -> . function_call
    (22) function_call -> . VARIABLE LPAREN RPAREN
    (23) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 21
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10

    expression                     shift and go to state 22
    flow                           shift and go to state 23
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 13

    (22) function_call -> VARIABLE LPAREN . RPAREN
    (23) function_call -> VARIABLE LPAREN . params RPAREN
    (24) params -> . params COMMA expression
    (25) params -> . expression
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) expression -> . string
    (13) term -> . term TIMES exponent
    (14) term -> . term DIVIDE exponent
    (15) term -> . exponent
    (12) string -> . STRING
    (16) exponent -> . factor EXP factor
    (17) exponent -> . factor
    (18) exponent -> . LPAREN expression RPAREN
    (19) factor -> . NUMBER
    (20) factor -> . VARIABLE
    (21) factor -> . function_call
    (22) function_call -> . VARIABLE LPAREN RPAREN
    (23) function_call -> . VARIABLE LPAREN params RPAREN

    RPAREN          shift and go to state 24
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 20

    params                         shift and go to state 25
    expression                     shift and go to state 26
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 14

    (8) expression -> expression PLUS . term
    (13) term -> . term TIMES exponent
    (14) term -> . term DIVIDE exponent
    (15) term -> . exponent
    (16) exponent -> . factor EXP factor
    (17) exponent -> . factor
    (18) exponent -> . LPAREN expression RPAREN
    (19) factor -> . NUMBER
    (20) factor -> . VARIABLE
    (21) factor -> . function_call
    (22) function_call -> . VARIABLE LPAREN RPAREN
    (23) function_call -> . VARIABLE LPAREN params RPAREN

    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 20

    term                           shift and go to state 27
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 15

    (9) expression -> expression MINUS . term
    (13) term -> . term TIMES exponent
    (14) term -> . term DIVIDE exponent
    (15) term -> . exponent
    (16) exponent -> . factor EXP factor
    (17) exponent -> . factor
    (18) exponent -> . LPAREN expression RPAREN
    (19) factor -> . NUMBER
    (20) factor -> . VARIABLE
    (21) factor -> . function_call
    (22) function_call -> . VARIABLE LPAREN RPAREN
    (23) function_call -> . VARIABLE LPAREN params RPAREN

    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 20

    term                           shift and go to state 28
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 16

    (13) term -> term TIMES . exponent
    (16) exponent -> . factor EXP factor
    (17) exponent -> . factor
    (18) exponent -> . LPAREN expression RPAREN
    (19) factor -> . NUMBER
    (20) factor -> . VARIABLE
    (21) factor -> . function_call
    (22) function_call -> . VARIABLE LPAREN RPAREN
    (23) function_call -> . VARIABLE LPAREN params RPAREN

    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 20

    exponent                       shift and go to state 29
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 17

    (14) term -> term DIVIDE . exponent
    (16) exponent -> . factor EXP factor
    (17) exponent -> . factor
    (18) exponent -> . LPAREN expression RPAREN
    (19) factor -> . NUMBER
    (20) factor -> . VARIABLE
    (21) factor -> . function_call
    (22) function_call -> . VARIABLE LPAREN RPAREN
    (23) function_call -> . VARIABLE LPAREN params RPAREN

    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 20

    exponent                       shift and go to state 30
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 18

    (16) exponent -> factor EXP . factor
    (19) factor -> . NUMBER
    (20) factor -> . VARIABLE
    (21) factor -> . function_call
    (22) function_call -> . VARIABLE LPAREN RPAREN
    (23) function_call -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 20

    factor                         shift and go to state 31
    function_call                  shift and go to state 11

state 19

    (18) exponent -> LPAREN expression . RPAREN
    (8) expression -> expression . PLUS term
    (9) expression -> expression . MINUS term

    RPAREN          shift and go to state 32
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 20

    (20) factor -> VARIABLE .
    (22) function_call -> VARIABLE . LPAREN RPAREN
    (23) function_call -> VARIABLE . LPAREN params RPAREN

    EXP             reduce using rule 20 (factor -> VARIABLE .)
    TIMES           reduce using rule 20 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 20 (factor -> VARIABLE .)
    RPAREN          reduce using rule 20 (factor -> VARIABLE .)
    PLUS            reduce using rule 20 (factor -> VARIABLE .)
    MINUS           reduce using rule 20 (factor -> VARIABLE .)
    COMMA           reduce using rule 20 (factor -> VARIABLE .)
    $end            reduce using rule 20 (factor -> VARIABLE .)
    LPAREN          shift and go to state 13


state 21

    (3) flow -> VARIABLE . CONNECT flow_functions
    (20) factor -> VARIABLE .
    (22) function_call -> VARIABLE . LPAREN RPAREN
    (23) function_call -> VARIABLE . LPAREN params RPAREN

    CONNECT         shift and go to state 33
    EXP             reduce using rule 20 (factor -> VARIABLE .)
    TIMES           reduce using rule 20 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 20 (factor -> VARIABLE .)
    PLUS            reduce using rule 20 (factor -> VARIABLE .)
    MINUS           reduce using rule 20 (factor -> VARIABLE .)
    $end            reduce using rule 20 (factor -> VARIABLE .)
    LPAREN          shift and go to state 13


state 22

    (1) assignment -> VARIABLE SETTO expression .
    (8) expression -> expression . PLUS term
    (9) expression -> expression . MINUS term

    $end            reduce using rule 1 (assignment -> VARIABLE SETTO expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 23

    (2) assignment -> VARIABLE SETTO flow .

    $end            reduce using rule 2 (assignment -> VARIABLE SETTO flow .)


state 24

    (22) function_call -> VARIABLE LPAREN RPAREN .

    EXP             reduce using rule 22 (function_call -> VARIABLE LPAREN RPAREN .)
    TIMES           reduce using rule 22 (function_call -> VARIABLE LPAREN RPAREN .)
    DIVIDE          reduce using rule 22 (function_call -> VARIABLE LPAREN RPAREN .)
    PLUS            reduce using rule 22 (function_call -> VARIABLE LPAREN RPAREN .)
    MINUS           reduce using rule 22 (function_call -> VARIABLE LPAREN RPAREN .)
    $end            reduce using rule 22 (function_call -> VARIABLE LPAREN RPAREN .)
    RPAREN          reduce using rule 22 (function_call -> VARIABLE LPAREN RPAREN .)
    COMMA           reduce using rule 22 (function_call -> VARIABLE LPAREN RPAREN .)


state 25

    (23) function_call -> VARIABLE LPAREN params . RPAREN
    (24) params -> params . COMMA expression

    RPAREN          shift and go to state 34
    COMMA           shift and go to state 35


state 26

    (25) params -> expression .
    (8) expression -> expression . PLUS term
    (9) expression -> expression . MINUS term

    RPAREN          reduce using rule 25 (params -> expression .)
    COMMA           reduce using rule 25 (params -> expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 27

    (8) expression -> expression PLUS term .
    (13) term -> term . TIMES exponent
    (14) term -> term . DIVIDE exponent

    PLUS            reduce using rule 8 (expression -> expression PLUS term .)
    MINUS           reduce using rule 8 (expression -> expression PLUS term .)
    $end            reduce using rule 8 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 8 (expression -> expression PLUS term .)
    COMMA           reduce using rule 8 (expression -> expression PLUS term .)
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 28

    (9) expression -> expression MINUS term .
    (13) term -> term . TIMES exponent
    (14) term -> term . DIVIDE exponent

    PLUS            reduce using rule 9 (expression -> expression MINUS term .)
    MINUS           reduce using rule 9 (expression -> expression MINUS term .)
    $end            reduce using rule 9 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 9 (expression -> expression MINUS term .)
    COMMA           reduce using rule 9 (expression -> expression MINUS term .)
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 29

    (13) term -> term TIMES exponent .

    TIMES           reduce using rule 13 (term -> term TIMES exponent .)
    DIVIDE          reduce using rule 13 (term -> term TIMES exponent .)
    PLUS            reduce using rule 13 (term -> term TIMES exponent .)
    MINUS           reduce using rule 13 (term -> term TIMES exponent .)
    $end            reduce using rule 13 (term -> term TIMES exponent .)
    RPAREN          reduce using rule 13 (term -> term TIMES exponent .)
    COMMA           reduce using rule 13 (term -> term TIMES exponent .)


state 30

    (14) term -> term DIVIDE exponent .

    TIMES           reduce using rule 14 (term -> term DIVIDE exponent .)
    DIVIDE          reduce using rule 14 (term -> term DIVIDE exponent .)
    PLUS            reduce using rule 14 (term -> term DIVIDE exponent .)
    MINUS           reduce using rule 14 (term -> term DIVIDE exponent .)
    $end            reduce using rule 14 (term -> term DIVIDE exponent .)
    RPAREN          reduce using rule 14 (term -> term DIVIDE exponent .)
    COMMA           reduce using rule 14 (term -> term DIVIDE exponent .)


state 31

    (16) exponent -> factor EXP factor .

    TIMES           reduce using rule 16 (exponent -> factor EXP factor .)
    DIVIDE          reduce using rule 16 (exponent -> factor EXP factor .)
    PLUS            reduce using rule 16 (exponent -> factor EXP factor .)
    MINUS           reduce using rule 16 (exponent -> factor EXP factor .)
    $end            reduce using rule 16 (exponent -> factor EXP factor .)
    RPAREN          reduce using rule 16 (exponent -> factor EXP factor .)
    COMMA           reduce using rule 16 (exponent -> factor EXP factor .)


state 32

    (18) exponent -> LPAREN expression RPAREN .

    TIMES           reduce using rule 18 (exponent -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 18 (exponent -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 18 (exponent -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 18 (exponent -> LPAREN expression RPAREN .)
    $end            reduce using rule 18 (exponent -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 18 (exponent -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 18 (exponent -> LPAREN expression RPAREN .)


state 33

    (3) flow -> VARIABLE CONNECT . flow_functions
    (4) flow_functions -> . flow_function_call CONNECT flow_functions
    (5) flow_functions -> . flow_function_call
    (6) flow_function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 36

    flow_functions                 shift and go to state 37
    flow_function_call             shift and go to state 38

state 34

    (23) function_call -> VARIABLE LPAREN params RPAREN .

    EXP             reduce using rule 23 (function_call -> VARIABLE LPAREN params RPAREN .)
    TIMES           reduce using rule 23 (function_call -> VARIABLE LPAREN params RPAREN .)
    DIVIDE          reduce using rule 23 (function_call -> VARIABLE LPAREN params RPAREN .)
    PLUS            reduce using rule 23 (function_call -> VARIABLE LPAREN params RPAREN .)
    MINUS           reduce using rule 23 (function_call -> VARIABLE LPAREN params RPAREN .)
    $end            reduce using rule 23 (function_call -> VARIABLE LPAREN params RPAREN .)
    RPAREN          reduce using rule 23 (function_call -> VARIABLE LPAREN params RPAREN .)
    COMMA           reduce using rule 23 (function_call -> VARIABLE LPAREN params RPAREN .)


state 35

    (24) params -> params COMMA . expression
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) expression -> . string
    (13) term -> . term TIMES exponent
    (14) term -> . term DIVIDE exponent
    (15) term -> . exponent
    (12) string -> . STRING
    (16) exponent -> . factor EXP factor
    (17) exponent -> . factor
    (18) exponent -> . LPAREN expression RPAREN
    (19) factor -> . NUMBER
    (20) factor -> . VARIABLE
    (21) factor -> . function_call
    (22) function_call -> . VARIABLE LPAREN RPAREN
    (23) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 20

    expression                     shift and go to state 39
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 36

    (6) flow_function_call -> VARIABLE . LPAREN params RPAREN

    LPAREN          shift and go to state 40


state 37

    (3) flow -> VARIABLE CONNECT flow_functions .

    $end            reduce using rule 3 (flow -> VARIABLE CONNECT flow_functions .)


state 38

    (4) flow_functions -> flow_function_call . CONNECT flow_functions
    (5) flow_functions -> flow_function_call .

    CONNECT         shift and go to state 41
    $end            reduce using rule 5 (flow_functions -> flow_function_call .)


state 39

    (24) params -> params COMMA expression .
    (8) expression -> expression . PLUS term
    (9) expression -> expression . MINUS term

    RPAREN          reduce using rule 24 (params -> params COMMA expression .)
    COMMA           reduce using rule 24 (params -> params COMMA expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 40

    (6) flow_function_call -> VARIABLE LPAREN . params RPAREN
    (24) params -> . params COMMA expression
    (25) params -> . expression
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) expression -> . string
    (13) term -> . term TIMES exponent
    (14) term -> . term DIVIDE exponent
    (15) term -> . exponent
    (12) string -> . STRING
    (16) exponent -> . factor EXP factor
    (17) exponent -> . factor
    (18) exponent -> . LPAREN expression RPAREN
    (19) factor -> . NUMBER
    (20) factor -> . VARIABLE
    (21) factor -> . function_call
    (22) function_call -> . VARIABLE LPAREN RPAREN
    (23) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 20

    params                         shift and go to state 42
    expression                     shift and go to state 26
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 41

    (4) flow_functions -> flow_function_call CONNECT . flow_functions
    (4) flow_functions -> . flow_function_call CONNECT flow_functions
    (5) flow_functions -> . flow_function_call
    (6) flow_function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 36

    flow_function_call             shift and go to state 38
    flow_functions                 shift and go to state 43

state 42

    (6) flow_function_call -> VARIABLE LPAREN params . RPAREN
    (24) params -> params . COMMA expression

    RPAREN          shift and go to state 44
    COMMA           shift and go to state 35


state 43

    (4) flow_functions -> flow_function_call CONNECT flow_functions .

    $end            reduce using rule 4 (flow_functions -> flow_function_call CONNECT flow_functions .)


state 44

    (6) flow_function_call -> VARIABLE LPAREN params RPAREN .

    CONNECT         reduce using rule 6 (flow_function_call -> VARIABLE LPAREN params RPAREN .)
    $end            reduce using rule 6 (flow_function_call -> VARIABLE LPAREN params RPAREN .)

